{"ast":null,"code":"import { LOGIN_USER_SUCCESS, LOGIN_USER_REQUEST, GET_USER_PROFILE_REQUEST, GET_USER_PROFILE_SUCCESS, REGISTER_USER_SUCCESS, REGISTER_USER_REQUEST, LOGIN_USER_FAILURE, REGISTER_USER_FAILURE, GET_USER_PROFILE_FAILURE, LOGOUT, FIND_USER_BY_ID_SUCCESS, FOLLOW_USER_SUCCESS, UPDATE_USER_SUCCESS } from \"./ActionType\";\nimport axios from 'axios';\nconst initialState = {\n  user: null,\n  error: null,\n  jwt: null,\n  loading: false\n};\nexport const authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOGIN_USER_REQUEST:\n    case REGISTER_USER_REQUEST:\n    case GET_USER_PROFILE_REQUEST:\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n    case LOGIN_USER_SUCCESS:\n    case REGISTER_USER_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        jwt: action.payload.jwt,\n        user: action.payload.user\n      };\n    case GET_USER_PROFILE_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        user: action.payload\n      };\n    //  case UPDATE_USER_SUCCESS:\n    //     return { ...state, loading: false, error: null, user: action.payload, updateUser:true }\n    case FIND_USER_BY_ID_SUCCESS:\n    case UPDATE_USER_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        findUser: action.payload\n      };\n    case FOLLOW_USER_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        error: null,\n        findUser: action.payload\n      };\n    case LOGOUT:\n      return initialState;\n    case LOGIN_USER_FAILURE:\n    case REGISTER_USER_FAILURE:\n    case GET_USER_PROFILE_FAILURE:\n      return {\n        ...state,\n        loading: false,\n        error: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const loginUser = loginData => async dispatch => {\n  dispatch({\n    type: LOGIN_USER_REQUEST\n  });\n  try {\n    const res = await axios.post(\"/api/auth/login\", loginData);\n\n    // ðŸ‘‡ Log the full response to verify structure\n    console.log(\"Login response:\", res.data);\n    dispatch({\n      type: LOGIN_USER_SUCCESS,\n      payload: {\n        jwt: res.data.jwt,\n        user: res.data.user // <-- Ensure backend returns `user`\n      }\n    });\n  } catch (error) {\n    var _error$response, _error$response$data;\n    dispatch({\n      type: LOGIN_USER_FAILURE,\n      payload: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message\n    });\n  }\n};","map":{"version":3,"names":["LOGIN_USER_SUCCESS","LOGIN_USER_REQUEST","GET_USER_PROFILE_REQUEST","GET_USER_PROFILE_SUCCESS","REGISTER_USER_SUCCESS","REGISTER_USER_REQUEST","LOGIN_USER_FAILURE","REGISTER_USER_FAILURE","GET_USER_PROFILE_FAILURE","LOGOUT","FIND_USER_BY_ID_SUCCESS","FOLLOW_USER_SUCCESS","UPDATE_USER_SUCCESS","axios","initialState","user","error","jwt","loading","authReducer","state","action","type","payload","findUser","loginUser","loginData","dispatch","res","post","console","log","data","_error$response","_error$response$data","response","message"],"sources":["C:/Users/Admin/vs/twitter/src/Store/Auth/Reducer.js"],"sourcesContent":["import { LOGIN_USER_SUCCESS, LOGIN_USER_REQUEST, GET_USER_PROFILE_REQUEST, GET_USER_PROFILE_SUCCESS, REGISTER_USER_SUCCESS, REGISTER_USER_REQUEST, LOGIN_USER_FAILURE, REGISTER_USER_FAILURE, GET_USER_PROFILE_FAILURE, LOGOUT, FIND_USER_BY_ID_SUCCESS, FOLLOW_USER_SUCCESS, UPDATE_USER_SUCCESS } from \"./ActionType\"\r\nimport axios from 'axios';\r\n\r\nconst initialState = {\r\n    user: null,\r\n    error: null,\r\n    jwt: null,\r\n    loading: false,\r\n}\r\n\r\n\r\nexport const authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOGIN_USER_REQUEST:\r\n        case REGISTER_USER_REQUEST:\r\n        case GET_USER_PROFILE_REQUEST:\r\n            return { ...state, loading: true, error: null }\r\n\r\n        case LOGIN_USER_SUCCESS:\r\n        case REGISTER_USER_SUCCESS:\r\n            return { ...state, loading: false, error: null, jwt: action.payload.jwt,  user: action.payload.user, }\r\n        case GET_USER_PROFILE_SUCCESS:\r\n            return { ...state, loading: false, error: null, user: action.payload }\r\n        //  case UPDATE_USER_SUCCESS:\r\n        //     return { ...state, loading: false, error: null, user: action.payload, updateUser:true }\r\n        case FIND_USER_BY_ID_SUCCESS:\r\n        case UPDATE_USER_SUCCESS:\r\n            return { ...state, loading: false, error: null, findUser: action.payload }\r\n        case FOLLOW_USER_SUCCESS:\r\n            return { ...state, loading: false, error: null, findUser: action.payload }\r\n        case LOGOUT:\r\n            return initialState\r\n        case LOGIN_USER_FAILURE:\r\n        case REGISTER_USER_FAILURE:\r\n        case GET_USER_PROFILE_FAILURE:\r\n            return { ...state, loading: false, error:   action.payload }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport const loginUser = (loginData) => async (dispatch) => {\r\n  dispatch({ type: LOGIN_USER_REQUEST });\r\n  try {\r\n    const res = await axios.post(\"/api/auth/login\", loginData);\r\n\r\n    // ðŸ‘‡ Log the full response to verify structure\r\n    console.log(\"Login response:\", res.data);\r\n\r\n    dispatch({\r\n      type: LOGIN_USER_SUCCESS,\r\n      payload: {\r\n        jwt: res.data.jwt,\r\n        user: res.data.user, // <-- Ensure backend returns `user`\r\n      },\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: LOGIN_USER_FAILURE,\r\n      payload: error.response?.data?.message || error.message,\r\n    });\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}